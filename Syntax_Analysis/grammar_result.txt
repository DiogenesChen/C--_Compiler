addExp -> mulExp addExpAtom
addExpAtom -> + mulExp addExpAtom | - mulExp addExpAtom | $
argConst -> , constDef argConst | $
argExp -> exp | $
argFunctionF -> , funcFParam argFunctionF | $
argFunctionR -> , funcRParam argFunctionR | $
argVarDecl -> , varDef argVarDecl | $
argVarDef -> = initVal | $
assignExp -> eqExp assignExpAtom
assignExpAtom -> = eqExp assignExpAtom | $
bType -> int
block -> { blockItem }
blockItem -> decl blockItem | stmt blockItem | $
callFunc -> ( funcRParams ) | $
compUnit -> decl compUnit | funcDef compUnit | $
constDecl -> const bType constDef argConst ;
constDef -> IDN = constInitVal
constExp -> assignExp
constInitVal -> constExp
decl -> constDecl | varDecl
eqExp -> relExp eqExpAtom
eqExpAtom -> == relExp eqExpAtom | != relExp eqExpAtom | $
exp -> assignExp
funcDef -> funcType IDN ( funcFParams ) block
funcFParam -> bType IDN
funcFParams -> funcFParam argFunctionF | $
funcRParam -> exp
funcRParams -> funcRParam argFunctionR | $
funcType -> void
initVal -> exp
mulExp -> unaryExp mulExpAtom
mulExpAtom -> * unaryExp mulExpAtom | / unaryExp mulExpAtom | % unaryExp mulExpAtom | $
number -> INT
program -> compUnit
relExp -> addExp relExpAtom
relExpAtom -> < addExp relExpAtom | > addExp relExpAtom | <= addExp relExpAtom | >= addExp relExpAtom | $
stmt -> exp ; | ; | block | return argExp ;
unaryExp -> number | IDN callFunc
varDecl -> bType varDef argVarDecl ;
varDef -> IDN argVarDef
